<svg xmlns="http://www.w3.org/2000/svg"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 onload="BLOTTO_APP.onLoad();"> 
	<script><![CDATA[
	var BLOTTO_APP = {};
	
	BLOTTO_APP.DS_FILL_COLOR = '#a55';
	BLOTTO_APP.DS_STROKE_COLOR = '#633';
	
	BLOTTO_APP.LS_FILL_COLOR = '#55a';
	BLOTTO_APP.LS_STROKE_COLOR = '#336';
	
	BLOTTO_APP.SCALE_FACTOR = 3;
	BLOTTO_APP.SVG_NS = 'http://www.w3.org/2000/svg';
	
	BLOTTO_APP.sides = {
		light : 0,
		dark: 1
	};
	
	BLOTTO_APP.states = {
		asigningTroops: 0,
		fight: 1,
		result: 2,
		invalid: 3
	};
	
	BLOTTO_APP.units = [];
	
	BLOTTO_APP.onLoad = function() {
		this.currentState = this.states.asigningTroops;
		area = document.getElementById('area');
		bg = document.getElementById('background');
		this.makeBGTopography(bg);
		for (var i = 0; i < 10; i++) {
			this.units[i] = this.makeUnit(i * 31 + 35.5, 250,
				10, this.sides.light, area);
		}
		for (var i = 0; i < 10; i++) {
			this.units[i] = this.makeUnit(i * 31 + 35.5, 50,
				10, this.sides.dark, area);
		}
	};
	
	BLOTTO_APP.makeBGTopography = function(bg) {
		// 1) makes a fractal heightmap
		heightMap = [];
		for (var i = 0; i < 32 + 1; i++) {
			heightMap[i] = [];
		}
		heightMap[0][0] = heightMap[0][33-1] = heightMap[33-1][0] = 
			heightMap[32][32] = 0;
		var recFractal = function(left, top, right, bottom, delta, hm) {
			if (right - left == 1) {
				return;
			}
			var cx = (left + right) / 2;
			var cy = (top + bottom) / 2;
			// FIXME: For debugging
			//alert('cy ' + cy + ' cx ' + cx + ' left ' + left + ' right ' + right + ' top ' + top + ' bottom ' + bottom);
			// gets the central point height
			hm[cy][cx] = (Math.random() - 0.5) * delta + 
				(hm[top][left] + hm[top][right] + hm[bottom][left] + 
				hm[bottom][right]) / 4;
			// the edges are average
			hm[cy][left] = (hm[top][left] + hm[bottom][left]) / 2;
			hm[cy][right] = (hm[top][right] + hm[bottom][right]) / 2;
			hm[top][cx] = (hm[top][left] + hm[top][right]) / 2;
			hm[bottom][cx] = (hm[bottom][left] + hm[bottom][right]) / 2;
			// recursive phase
			recFractal(left, top, cx, cy, delta * 0.7, hm);
			recFractal(left, cy, cx, bottom, delta * 0.7, hm);
			recFractal(cx, top, right, cy, delta * 0.7, hm);
			recFractal(cx, cy, right, bottom, delta * 0.7, hm);
		}
		recFractal(0, 0, 32, 32, 1, heightMap);
		
		// 2) gets contours as line segments
		// FIXME: Implement
		
		// 3) builds the paths that graphically represent the contours
		// FIXME: Implement
	};
	
	BLOTTO_APP.makeUnit = function(x, y, n, side, symbolOwner) {
		newUnit = {};
		newUnit.x = x;
		newUnit.y = y;
		newUnit.n = n;
		newUnit.side = side;
		newUnit.symbol = document.createElementNS(this.SVG_NS, 'circle');
		symbolOwner.appendChild(newUnit.symbol);
		newUnit.symbol.setAttribute('stroke-width', '2');
		newUnit.update = function() {
			this.symbol.setAttribute('cx', this.x);
			this.symbol.setAttribute('cy', this.y);
			this.symbol.setAttribute('r', Math.sqrt(this.n) * 
				BLOTTO_APP.SCALE_FACTOR);
			if (side == BLOTTO_APP.sides.light) {
				this.symbol.setAttribute('stroke', BLOTTO_APP.LS_STROKE_COLOR);
				this.symbol.setAttribute('fill', BLOTTO_APP.LS_FILL_COLOR);
			}
			else { // If they aren't with us, they're against us... :-P
				this.symbol.setAttribute('stroke', BLOTTO_APP.DS_STROKE_COLOR);
				this.symbol.setAttribute('fill', BLOTTO_APP.DS_FILL_COLOR);
			}
		};
		newUnit.update();
	};
	
	]]></script>
	<g id="frame">
		<rect id="frameBackground" x="0" y="0" width="370" height="340"
		 stroke-width="0" fill="#777" />
		<text id="stepTxt" x="185" y="22" fill="#ccc"
		 font-size="16" font-family="sans-serif" font-weight="bold" 
		 text-anchor="middle"> 
		Colonel Blotto
		</text> 
		<g id="area" transform="translate(10,30)">
			<g id="background">
				<rect id="areaBGRect" x="0" y="0" width="350" height="300"
				 stroke-width="0" fill="#000000" />
			</g>
		</g>
	</g>
</svg>